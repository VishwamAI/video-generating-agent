name: CI

on:
  push:
    branches:
      - main
      - feature/add-logging-and-genre-support
  pull_request:
    branches:
      - main
      - feature/add-logging-and-genre-support

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Clear Python package cache
      run: |
        pip cache purge

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify installation
      run: |
        pip list
        python -c "import matplotlib.pyplot as plt; print('matplotlib installed successfully')"

    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=$PYTHONPATH:/home/runner/work/video-generating-agent/video-generating-agent/nonrigid_nerf" >> $GITHUB_ENV

    - name: Download pre-trained model
      run: |
        chmod +x download_model.sh
        ./download_model.sh
        echo "Current working directory: $(pwd)"
        echo "Contents of models directory:"
        ls -l models

    - name: Verify model download
      run: |
        if [ -f "models/RealESRGANv2-animevideo-xsx4.pth" ]; then
          echo "Model file exists."
        else
          echo "Model file does not exist."
          exit 1
        fi

    - name: Create kaggle.json file
      run: |
        mkdir -p ~/.kaggle
        if [ -d ~/.kaggle ]; then
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
        else
          echo "Failed to create .kaggle directory."
          exit 1
        fi
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    - name: Install Kaggle CLI
      run: |
        pip install kaggle
        mkdir -p ~/.kaggle
        echo "Kaggle CLI installed successfully."
        echo "Checking for kaggle.json file..."
        if [ -f ~/.kaggle/kaggle.json ]; then
          echo "kaggle.json file exists."
        else
          echo "kaggle.json file does not exist."
          exit 1
        fi
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    - name: Download dataset from Kaggle
      run: |
        echo "Starting dataset download from Kaggle..."
        kaggle datasets download -d sauravmaheshkar/nerf-dataset -p preprocessed_data
        if [ $? -ne 0 ]; then
          echo "Failed to download dataset from Kaggle."
          exit 1
        fi
        if [ -f "preprocessed_data/nerf-dataset.zip" ]; then
          echo "Dataset download complete."
          echo "Size of nerf-dataset.zip: $(stat -c%s preprocessed_data/nerf-dataset.zip) bytes"
        else
          echo "nerf-dataset.zip file does not exist."
          exit 1
        fi
        echo "Contents of preprocessed_data directory after download:"
        ls -l preprocessed_data
        echo "Contents of nerf-dataset.zip:"
        unzip -l preprocessed_data/nerf-dataset.zip

    - name: Unzip dataset
      run: |
        echo "Starting dataset unzip..."
        unzip -o preprocessed_data/nerf-dataset.zip -d preprocessed_data
        if [ $? -ne 0 ]; then
          echo "Failed to unzip dataset."
          exit 1
        fi
        echo "Contents of preprocessed_data directory after unzip:"
        ls -l preprocessed_data
        if [ -d "preprocessed_data/nerf_llff_data" ]; then
          echo "Dataset unzip complete."
          echo "Contents of nerf_llff_data directory after unzip:"
          ls -l preprocessed_data/nerf_llff_data
        else
          echo "nerf_llff_data directory does not exist."
          exit 1
        fi
        if [ -d "preprocessed_data/nerf_llff_data" ] || [ -d "preprocessed_data/nerf_real_360" ] || [ -d "preprocessed_data/nerf_synthetic" ]; then
          echo "Dataset directories exist."
        else
          echo "Dataset directories do not exist."
          exit 1
        fi

    - name: Wait for dataset extraction
      run: |
        for i in {1..480}; do  # Increased timeout to 480 iterations
          echo "Current time: $(date)"
          echo "Size of nerf-dataset.zip: $(stat -c%s preprocessed_data/nerf-dataset.zip) bytes"
          if [ -d "preprocessed_data/nerf_llff_data/nerf_llff_data/trex/images" ]; then
            echo "Dataset extraction complete."
            break
          else
            echo "Waiting for dataset extraction... (Attempt $i)"
            echo "Current contents of preprocessed_data directory:"
            ls -l preprocessed_data
            echo "Current contents of nerf_llff_data directory:"
            ls -l preprocessed_data/nerf_llff_data
            echo "Current contents of nerf_llff_data/trex directory:"
            ls -l preprocessed_data/nerf_llff_data/nerf_llff_data/trex
            sleep 15
          fi
        done
        if [ ! -d "preprocessed_data/nerf_llff_data/nerf_llff_data/trex/images" ]; then
          echo "Dataset extraction failed."
          echo "Final contents of preprocessed_data directory:"
          ls -l preprocessed_data
          echo "Final contents of nerf_llff_data directory:"
          ls -l preprocessed_data/nerf_llff_data
          echo "Final contents of nerf_llff_data/trex directory:"
          ls -l preprocessed_data/nerf_llff_data/nerf_llff_data/trex
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify dataset download
      run: |
        echo "Verifying dataset download..."
        if [ -d "preprocessed_data/nerf_llff_data" ] || [ -d "preprocessed_data/nerf_real_360" ] || [ -d "preprocessed_data/nerf_synthetic" ]; then
          echo "Dataset directories exist and are not empty."
        else
          echo "Dataset directories do not exist or are empty."
          exit 1
        fi

    - name: List contents of preprocessed_data directory
      run: |
        echo "Listing contents of preprocessed_data directory:"
        ls -l preprocessed_data

    - name: List contents of nerf_llff_data subdirectories
      run: |
        echo "Listing contents of nerf_llff_data subdirectories:"
        ls -lR preprocessed_data/nerf_llff_data

    - name: List all subdirectories within nerf_llff_data
      run: |
        echo "Listing all subdirectories within nerf_llff_data:"
        find preprocessed_data/nerf_llff_data -type d

    - name: List contents of nerf_llff_data directory
      run: |
        echo "Listing contents of nerf_llff_data directory:"
        ls -l preprocessed_data/nerf_llff_data

    - name: List contents of nerf_real_360 directory
      run: |
        echo "Listing contents of nerf_real_360 directory:"
        ls -l preprocessed_data/nerf_real_360

    - name: List contents of nerf_synthetic directory
      run: |
        echo "Listing contents of nerf_synthetic directory:"
        ls -l preprocessed_data/nerf_synthetic

    - name: List contents of images directories in nerf_llff_data
      run: |
        echo "Listing contents of images directories in nerf_llff_data:"
        ls -l preprocessed_data/nerf_llff_data/nerf_llff_data/trex/images/

    - name: Verify presence of image files in nerf_llff_data directory
      run: |
        echo "Verifying presence of image files in nerf_llff_data directory..."
        if find preprocessed_data/nerf_llff_data/nerf_llff_data -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" \) | grep -q .; then
          echo "Image files exist in nerf_llff_data directory."
        else
          echo "Image files do not exist in nerf_llff_data directory."
          exit 1
        fi
    - name: Train model
      run: |
        python nonrigid_nerf/train.py --config nonrigid_nerf/configs/training_config.txt --datadir preprocessed_data/nerf_llff_data

    - name: Run tests
      run: |
        python -m unittest discover -s tests
